(module "md5"
  (export
    `("bit-rol" ,bit-rol)
    `("md5" ,md5))

  (& bitwise-and)
  (~ bitwise-not)
  (^ bitwise-xor)
  (| bitwise-or)
  (<< arithmetic-shift)
  (<<< unsigned-arithmetic-shift)

  (add (lambda (x y)
    (let* ((lsw (+ (& x #xFFFF) (& y #xFFFF)))
           (shift (lambda (x) (<< x -16)))
           (msw (+ (shift x) (shift y) (shift lsw))))
      (| (<< msw 16) (& lsw #xFFFF)))))

  (bit-rol (lambda (num cnt)
    (| (<< num cnt) (<<< num (- (- 32 cnt))))))

  (md5-cmn (lambda (q a b x s t)
    (add (bit-rol (add (add a q) (add x t)) s) b)))

  (md5-ff (lambda (a b c d x s t)
    (md5-cmn (| (& b c) (& (~ b) d)) a b x s t)))

  (md5-gg (lambda (a b c d x s t)
    (md5-cmn (| (& b d) (& c (~ d))) a b x s t)))

  (md5-hh (lambda (a b c d x s t)
    (md5-cmn (^ b (^ c d)) a b x s t)))

  (md5-ii (lambda (a b c d x s t)
    (md5-cmn (^ c (| b (~ d))) a b x s t)))

  (binl-md5 (lambda (ox len)
    (begin
      ;(++ ox (| (get-from ox (<< len -5) 0) (<< #x80 (mod len 32))))
      ;(++ ox (+ 14 (<< (<<< (+ len 64) -9) 4)) len)
      (let ((a 1732584193)
            (b -271733879)
            (c -1732584194)
            (d 271733878)
            (end (length ox))
            (x (lambda (i) (get-from ox i 0))))
      (let loop ((i 0)
                 (olda a)
                 (oldb b)
                 (oldc c)
                 (oldd d))
        (if (< i end)
          (let* ((a (md5-ff a b c d (x i) 7 -680876936))
                 (_ (write a))
                 (d (md5-ff d a b c (x (+ i 1)) 12 -389564586))
                 (c (md5-ff c d a b (x (+ i 2)) 17 606105819))
                 (b (md5-ff b c d a (x (+ i 3)) 22 -1044525330))
                 (a (md5-ff a b c d (x (+ i 4)) 7 -176418897))
                 (d (md5-ff d a b c (x (+ i 5)) 12 1200080426))
                 (c (md5-ff c d a b (x (+ i 6)) 17 -1473231341))
                 (b (md5-ff b c d a (x (+ i 7)) 22 -45705983))
                 (a (md5-ff a b c d (x (+ i 8)) 7 1770035416))
                 (d (md5-ff d a b c (x (+ i 9)) 12 -1958414417))
                 (c (md5-ff c d a b (x (+ i 10)) 17 -42063))
                 (b (md5-ff b c d a (x (+ i 11)) 22 -1990404162))
                 (a (md5-ff a b c d (x (+ i 12)) 7 1804603682))
                 (d (md5-ff d a b c (x (+ i 13)) 12 -40341101))
                 (c (md5-ff c d a b (x (+ i 14)) 17 -1502002290))
                 (b (md5-ff b c d a (x (+ i 15)) 22 1236535329))

                 (a (md5-gg a b c d (x (+ i 1)) 5 -165796510))
                 (d (md5-gg d a b c (x (+ i 6)) 9 -1069501632))
                 (c (md5-gg c d a b (x (+ i 11)) 14 643717713))
                 (b (md5-gg b c d a (x i) 20 -373897302))
                 (a (md5-gg a b c d (x (+ i 5)) 5 -701558691))
                 (d (md5-gg d a b c (x (+ i 10)) 9 38016083))
                 (c (md5-gg c d a b (x (+ i 15)) 14 -660478335))
                 (b (md5-gg b c d a (x (+ i 4)) 20 -405537848))
                 (a (md5-gg a b c d (x (+ i 9)) 5 568446438))
                 (d (md5-gg d a b c (x (+ i 14)) 9 -1019803690))
                 (c (md5-gg c d a b (x (+ i 3)) 14 -187363961))
                 (b (md5-gg b c d a (x (+ i 8)) 20 1163531501))
                 (a (md5-gg a b c d (x (+ i 13)) 5 -1444681467))
                 (d (md5-gg d a b c (x (+ i 2)) 9 -51403784))
                 (c (md5-gg c d a b (x (+ i 7)) 14 1735328473))
                 (b (md5-gg b c d a (x (+ i 12)) 20 -1926607734))

                 (a (md5-hh a b c d (x (+ i 5)) 4 -378558))
                 (d (md5-hh d a b c (x (+ i 8)) 11 -2022574463))
                 (c (md5-hh c d a b (x (+ i 11)) 16 1839030562))
                 (b (md5-hh b c d a (x (+ i 14)) 23 -35309556))
                 (a (md5-hh a b c d (x (+ i 1)) 4 -1530992060))
                 (d (md5-hh d a b c (x (+ i 4)) 11 1272893353))
                 (c (md5-hh c d a b (x (+ i 7)) 16 -155497632))
                 (b (md5-hh b c d a (x (+ i 10)) 23 -1094730640))
                 (a (md5-hh a b c d (x (+ i 13)) 4 681279174))
                 (d (md5-hh d a b c (x i) 11 -358537222))
                 (c (md5-hh c d a b (x (+ i 3)) 16 -722521979))
                 (b (md5-hh b c d a (x (+ i 6)) 23 76029189))
                 (a (md5-hh a b c d (x (+ i 9)) 4 -640364487))
                 (d (md5-hh d a b c (x (+ i 12)) 11 -421815835))
                 (c (md5-hh c d a b (x (+ i 15)) 16 530742520))
                 (b (md5-hh b c d a (x (+ i 2)) 23 -995338651))

                 (a (md5-ii a b c d (x i) 6 -198630844))
                 (d (md5-ii d a b c (x (+ i 7)) 10 1126891415))
                 (c (md5-ii c d a b (x (+ i 14)) 15 -1416354905))
                 (b (md5-ii b c d a (x (+ i 5)) 21 -57434055))
                 (a (md5-ii a b c d (x (+ i 12)) 6 1700485571))
                 (d (md5-ii d a b c (x (+ i 3)) 10 -1894986606))
                 (c (md5-ii c d a b (x (+ i 10)) 15 -1051523))
                 (b (md5-ii b c d a (x (+ i 1)) 21 -2054922799))
                 (a (md5-ii a b c d (x (+ i 8)) 6 1873313359))
                 (d (md5-ii d a b c (x (+ i 15)) 10 -30611744))
                 (c (md5-ii c d a b (x (+ i 6)) 15 -1560198380))
                 (b (md5-ii b c d a (x (+ i 13)) 21 1309151649))
                 (a (md5-ii a b c d (x (+ i 4)) 6 -145523070))
                 (d (md5-ii d a b c (x (+ i 11)) 10 -1120210379))
                 (c (md5-ii c d a b (x (+ i 2)) 15 718787259))
                 (b (md5-ii b c d a (x (+ i 9)) 21 -343485551))

                 (a (add a olda))
                 (b (add b oldb))
                 (c (add c oldc))
                 (d (add d oldd)))
          (loop (+ i 16) a b c d))
          (list olda oldb oldc oldd)))))))

  (binl2rstr (lambda (input)
    (let ((input (if (list? input) (list->vector input) input))
          (lin (length input)))
      (begin (write input)
      (let loop ((i 0) (output ""))
        (if (< i (* lin 32))
          (loop (+ i 8) (++ output (integer->char (<<< (input (<< i -5)) (mod i 32)))))
          output))))))

  (rstr2binl (lambda (input)
    (let ((lin8 (* (length input) 8)))
      (let loop ((i 0) (output (make-vector lin8 0)))
        (if (< i lin8)
          (loop (+ i 8)
                (vector:set! output
                             (<< i -5)
                             (| (output (<< i -5))
                                (<< (& (char->integer (string:ref input (/ i 8)))
                                       #xFF)
                                    (mod i 32)))))
          (begin (write output) (vector:filter (lambda (x) (not (eq? x 0))) output)))))))

  (rstr-hmac-md5 (lambda (key data)
    (let ((bkey (rstr2binl key))
          (ipad (make-vector 16 0))
          (opad (make-vector 16 0)))
      (begin
        (if (> (length bkey) 16)
          (set! bkey (binl-md5 bkey (* (length key) 8))))
        (let loop ((i 0))
          (if (< i 16)
            (begin
              (vector:set! ipad i (^ (bkey i) #x36363636))
              (vector:set! opad i (^ (bkey i) #x5C5C5C5C))
              (loop (add1 i)))
            (let ((hash (binl-md5 (++ ipad (restr2binl data)) (+ (* 8 (length data)) 512))))
              (binl2rstr (binl-md5 (++ opad hash) 640)))))))))

  (rstr2hex (lambda (input)
     (let ((hex-tab "0123456789abcdef")
           (end (length input)))
      (let loop ((i 0)
                 (output ""))
        (if (< i end)
          (let ((x (char->integer (string:ref input i))))
            (loop (add1 i)
                  (++ output
                      (string (string:ref hex-tab (& (<<< x -4) #x0F)))
                      (string:ref hex-tab (& x #x0F))))
          output))))))

  (raw-md5 (lambda (s)
    (rstr-md5 s)))

  (hex-md5 (lambda (s)
    (rstr2hex (raw-md5 s))))

  (raw-hmac-md5 (lambda (k d)
    (rstr-hmac-md5 k d)))

  (hex-hmac-md5 (lambda (k d)
    (rstr2hex (raw-hmac-md5 k d))))

  (rstr-md5 (lambda (s)
    (binl2rstr (binl-md5 (rstr2binl s) (* (length s) 8)))))

  (md5 (case-lambda
    ((str) (hex-md5 str))
    ((str key) (hex-hmac-md5 key str))
    ((str key raw) (if (truthy? key) (raw-hmac-md5 key str) (raw-md5 str))))))
